<project>
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>com.ozonehis</groupId>
    <artifactId>maven-commons</artifactId>
    <version>1.0.0-SNAPSHOT</version>
    <relativePath>../maven-commons</relativePath>
  </parent>

  <artifactId>ozone-distro</artifactId>
  <name>Ozone Distribution</name>
  <description>The enterprise-grade health information system built with OpenMRS 3</description>
  <packaging>pom</packaging>

  <organization>
    <name>Ozone HIS</name>
    <url>https://www.ozone-his.com</url>
  </organization>
  <developers>
    <developer>
      <name>Mekom Solutions</name>
      <url>https://www.mekomsolutions.com</url>
    </developer>
  </developers>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

    <!-- Dependency versions -->
    <referenceapplicationDistroVersion>3.0.0-SNAPSHOT</referenceapplicationDistroVersion>
    <odoo_initializerVersion>2.1.0</odoo_initializerVersion>
    <commonreportsVersion>1.4.0-SNAPSHOT</commonreportsVersion>
    <patientsummaryVersion>2.2.0</patientsummaryVersion>
    <eipOpenMRSSenaiteVersion>2.0.0-SNAPSHOT</eipOpenMRSSenaiteVersion>
    <eipOdooOpenMRSVersion>2.0.0-SNAPSHOT</eipOdooOpenMRSVersion>

    <!-- EIP Routes artifact Ids -->
    <eipOpenMRSSenaiteArtifactId>eip-openmrs-senaite</eipOpenMRSSenaiteArtifactId>
    <eipOdooOpenMRSArtifactId>eip-odoo-openmrs</eipOdooOpenMRSArtifactId>

    <!-- Classifier for the dependency report artifact -->
    <dependencyReportClassifier>dependencies</dependencyReportClassifier>
  </properties>

  <dependencies>
    <!-- OpenMRS Ref App -->
    <dependency>
      <groupId>org.openmrs.distro</groupId>
      <artifactId>referenceapplication-distro</artifactId>
      <type>zip</type>
      <version>${referenceapplicationDistroVersion}</version>
    </dependency>

    <dependency>
      <groupId>org.openmrs.distro</groupId>
      <artifactId>referenceapplication-frontend</artifactId>
      <type>zip</type>
      <version>${referenceapplicationDistroVersion}</version>
    </dependency>

    <!--  Odoo addons-->
    <dependency>
      <groupId>net.mekomsolutions.odoo</groupId>
      <artifactId>odoo_initializer</artifactId>
      <version>${odoo_initializerVersion}</version>
      <type>zip</type>
    </dependency>

    <!--  OpenMRS modules -->
    <dependency>
      <groupId>org.openmrs.module</groupId>
      <artifactId>patientsummary-omod</artifactId>
      <version>${patientsummaryVersion}</version>
      <type>jar</type>
    </dependency>
    <dependency>
      <groupId>org.openmrs.module</groupId>
      <artifactId>commonreports-omod</artifactId>
      <version>${commonreportsVersion}</version>
      <type>jar</type>
    </dependency>

    <!-- EIP services -->
    <dependency>
      <groupId>com.ozonehis</groupId>
      <artifactId>${eipOpenMRSSenaiteArtifactId}</artifactId>
      <version>${eipOpenMRSSenaiteVersion}</version>
      <type>jar</type>
    </dependency>
    <dependency>
      <groupId>com.ozonehis</groupId>
      <artifactId>${eipOdooOpenMRSArtifactId}</artifactId>
      <version>${eipOdooOpenMRSVersion}</version>
      <type>jar</type>
    </dependency>

  </dependencies>

  <build>
    <plugins>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>Copy Odoo Initializer add-on</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>unpack-dependencies</goal>
            </goals>
            <configuration>
              <excludeTransitive>true</excludeTransitive>
              <outputDirectory>
                ${project.build.directory}/${project.artifactId}-${project.version}/binaries/odoo/addons</outputDirectory>
              <includeArtifactIds>odoo_initializer</includeArtifactIds>
            </configuration>
          </execution>

          <execution>
            <id>Copy OpenMRS modules to a temporary location</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
            <configuration>
              <excludeTransitive>true</excludeTransitive>
              <useBaseVersion>true</useBaseVersion>
              <outputDirectory>${project.build.directory}/openmrs_modules/</outputDirectory>
              <!-- Copying JARs and OMODs only. -->
              <includeTypes>jar, omod</includeTypes>
            </configuration>
          </execution>

          <execution>
            <id>Copy EIP OpenMRS SENAITE JAR</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>copy</goal>
            </goals>
            <configuration>
              <artifactItems>
                <artifactItem>
                    <groupId>com.ozonehis</groupId>
                    <artifactId>${eipOpenMRSSenaiteArtifactId}</artifactId>
                    <version>${eipOpenMRSSenaiteVersion}</version>
                    <type>jar</type>
                    <overWrite>true</overWrite>
                    <outputDirectory>${project.build.directory}/${project.artifactId}-${project.version}/binaries/${eipOpenMRSSenaiteArtifactId}</outputDirectory>
                </artifactItem>
              </artifactItems>
              <useBaseVersion>true</useBaseVersion>
            </configuration>
          </execution>

          <execution>
            <id>Copy EIP Odoo OpenMRS JAR</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>copy</goal>
            </goals>
            <configuration>
                <artifactItems>
                  <artifactItem>
                    <groupId>com.ozonehis</groupId>
                    <artifactId>${eipOdooOpenMRSArtifactId}</artifactId>
                    <version>${eipOdooOpenMRSVersion}</version>
                    <type>jar</type>
                    <overWrite>true</overWrite>
                    <outputDirectory>${project.build.directory}/${project.artifactId}-${project.version}/binaries/${eipOdooOpenMRSArtifactId}</outputDirectory>
                  </artifactItem>
                </artifactItems>
            </configuration>
          </execution>

          <execution>
            <id>Unpack OpenMRS Ref App in a temporary location</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>unpack-dependencies</goal>
            </goals>
            <configuration>
              <excludeTransitive>true</excludeTransitive>
              <outputDirectory>${project.build.directory}/referenceapplication-distro</outputDirectory>
              <includeArtifactIds>referenceapplication-distro</includeArtifactIds>
            </configuration>
          </execution>

          <execution>
            <id>Unpack OpenMRS Ref App frontend configuration</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>unpack-dependencies</goal>
            </goals>
            <configuration>
              <excludeTransitive>true</excludeTransitive>
              <outputDirectory>${project.build.directory}/openmrs_frontend</outputDirectory>
              <includeArtifactIds>referenceapplication-frontend</includeArtifactIds>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <executions>
          <execution>
            <!-- Copy binaries/ folder -->
            <id>Copy local binaries/ resources</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>
                ${project.build.directory}/${project.artifactId}-${project.version}/binaries</outputDirectory>
              <overwrite>true</overwrite>
              <resources>
                <resource>
                  <directory>${project.basedir}/binaries</directory>
                </resource>
              </resources>
            </configuration>
          </execution>

          <execution>
            <!-- Copy configs/ folder -->
            <id>Copy local configs/ resources</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>
                ${project.build.directory}/${project.artifactId}-${project.version}/configs</outputDirectory>
              <overwrite>true</overwrite>
              <resources>
                <resource>
                  <directory>${project.basedir}/configs</directory>
                </resource>
              </resources>
            </configuration>
          </execution>
          
          <execution>
            <!-- Copy data/ folder -->
            <id>Copy local data/ resources</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>
                ${project.build.directory}/${project.artifactId}-${project.version}/data</outputDirectory>
              <overwrite>true</overwrite>
              <resources>
                <resource>
                  <directory>${project.basedir}/data</directory>
                </resource>
              </resources>
            </configuration>
          </execution>

          <execution>
            <!-- Copy OpenMRS modules -->
            <id>Copy OpenMRS modules</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>
                ${project.build.directory}/${project.artifactId}-${project.version}/binaries/openmrs/modules</outputDirectory>
              <overwrite>true</overwrite>
              <resources>
                <resource>
                  <directory>${project.build.directory}/openmrs_modules</directory>
                </resource>
              </resources>
            </configuration>
          </execution>

          <execution>
            <!-- Exclude files from O3 Ref App -->
            <id>Exclude some OpenMRS Ref App files</id>
            <phase>process-resources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>
                ${project.build.directory}/openmrs_config</outputDirectory>
              <overwrite>true</overwrite>
              <resources>
                <resource>
                  <directory>${project.build.directory}/referenceapplication-distro/openmrs_config</directory>
                  <excludes>
                    <exclude>**/*globalproperties_core-demo*</exclude>
                  </excludes>
                </resource>
              </resources>
            </configuration>
          </execution>

        </executions>
      </plugin>

      <plugin>
        <artifactId>maven-antrun-plugin</artifactId>
        <executions>
          <execution>
            <id>Rename JAR to OMOD</id>
            <phase>process-resources</phase>
            <configuration>
              <target>
                <move todir="${project.build.directory}/openmrs_modules">
                  <fileset dir="${project.build.directory}/openmrs_modules" />
                  <mapper from="^(.+)-omod-(.+)\.jar" to="\1-\2.omod" type="regexp" />
                </move>
              </target>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>

          <execution>
            <id>Remove non-OMODs from Modules</id>
            <!-- Because we copy all dependencies, it's possible to get non-OMOD Jars in the openmrs_modules folder.
                 This job, run after "Rename JAR to OMOD" removes the non-OMODs -->
            <phase>process-resources</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <target>
                <delete>
                  <fileset dir="${project.build.directory}/openmrs_modules" excludes="**/*.omod" />
                </delete>
              </target>
            </configuration>
          </execution>
          
          <execution>
            <id>Rename spa-assemble-config.json to reference-application-spa-assemble-config.json</id>
            <phase>generate-resources</phase>
            <configuration>
              <target>
                <copy todir="${project.build.directory}/${project.artifactId}-${project.version}/configs/openmrs/frontend_assembly">
                  <fileset dir="${project.build.directory}/openmrs_frontend" />
                  <mapper from="spa-assemble-config.json" to="reference-application-spa-assemble-config.json" type="regexp" />
                </copy>
                <move todir="${project.build.directory}/openmrs_frontend">
                  <fileset dir="${project.build.directory}/openmrs_frontend" />
                  <mapper from="spa-assemble-config.json" to="reference-application-spa-assemble-config.json" type="regexp" />
                </move>
              </target>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>

          <execution>
            <id>Copy filtered OpenMRS configuration</id>
            <phase>prepare-package</phase>
            <configuration>
              <target>
                <copy
                  todir="${project.build.directory}/${project.artifactId}-${project.version}/configs/openmrs/initializer_config">
                  <fileset
                    dir="${project.build.directory}/openmrs_config" />
                </copy>
              </target>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>

          <execution>
            <id>Copy filtered OpenMRS modules</id>
            <phase>prepare-package</phase>
            <configuration>
              <target>
                <copy
                  todir="${project.build.directory}/${project.artifactId}-${project.version}/binaries/openmrs/modules">
                  <fileset
                    dir="${project.build.directory}/referenceapplication-distro/sdk-distro/web/modules" />
                </copy>
              </target>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>

          <!-- copy over merged/packaged OpenMRS config for validation at the integration-test phase -->
          <execution>
            <id>Copy OpenMRS config for validation</id>
            <phase>pre-integration-test</phase>
            <configuration>
              <target>
                <copy todir="${project.build.directory}/configuration">
                  <fileset
                    dir="${project.build.directory}/${project.artifactId}-${project.version}/configs/openmrs/initializer_config" />
                </copy>
              </target>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.codehaus.gmavenplus</groupId>
        <artifactId>gmavenplus-plugin</artifactId>
        <executions>
          <execution>
            <id>Build OpenMRS Frontend</id>
            <goals>
              <goal>execute</goal>
            </goals>
            <phase>process-resources</phase>
            <configuration>
              <scripts>
                <script>file://${project.basedir}/../scripts/openmrs/frontend_assembly/build-openmrs-frontend.groovy</script>
              </scripts>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- packaging the distro as a installable/deployable file -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-assembly-plugin</artifactId>
        <executions>
          <execution>
            <id>Package distro artifacts</id>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
            <configuration>
              <appendAssemblyId>false</appendAssemblyId>
              <descriptors>
                <descriptor>assembly.xml</descriptor>
              </descriptors>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Compile a dependency report -->
      <plugin>
        <groupId>net.mekomsolutions.maven.plugin</groupId>
        <artifactId>dependency-tracker-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>Compile dependency report</id>
            <phase>compile</phase>
            <goals>
              <goal>track</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- Attach the dependency report to the build -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>Attach the dependency report</id>
            <phase>package</phase>
            <goals>
              <goal>attach-artifact</goal>
            </goals>
            <configuration>
              <artifacts>
                <artifact>
                  <file>
                    ${project.build.directory}/${project.artifactId}-${project.version}-dependencies.txt</file>
                  <type>txt</type>
                  <classifier>${dependencyReportClassifier}</classifier>
                </artifact>
              </artifacts>
            </configuration>
          </execution>
        </executions>
      </plugin>

    </plugins>
  </build>

  <profiles>
    <profile>
      <id>validator</id>
      <build>
        <plugins>
          <!-- copy over merged/packaged OpenMRS config for validation at the integration-test phase -->
          <plugin>
            <artifactId>maven-antrun-plugin</artifactId>
            <executions>
              <execution>
                <id>Copy OpenMRS Initializer configs for validation</id>
                <phase>pre-integration-test</phase>
                <configuration>
                  <target>
                    <copy todir="${project.build.directory}/validator/configuration">
                      <fileset dir="${project.build.directory}/${project.artifactId}-${project.version}/configs/openmrs/initializer_config"/>
                    </copy>
                  </target>
                </configuration>
                <goals>
                  <goal>run</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
          <!-- hooking the OpenMRS config validation to the integration-test phase -->
          <plugin>
            <groupId>org.openmrs.maven.plugins</groupId>
            <artifactId>openmrs-packager-maven-plugin</artifactId>
            <executions>
              <execution>
                <id>Validate OpenMRS Initializer configs</id>
                <phase>integration-test</phase>
                <goals>
                  <goal>validate-configurations</goal>
                </goals>
                <configuration>
                  <sourceDir>
                    ${project.build.directory}/validator/configuration</sourceDir>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
