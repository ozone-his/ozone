<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>com.ozonehis</groupId>
    <artifactId>maven-commons</artifactId>
    <version>1.0.0-SNAPSHOT</version>
    <relativePath>../maven-commons</relativePath>
  </parent>

  <artifactId>maven-parent</artifactId>
  <name>Ozone Maven Parent</name>
  <description>Parent project for Ozone implementation projects</description>
  <packaging>pom</packaging>

  <organization>
    <name>Ozone HIS</name>
    <url>https://www.ozone-his.com</url>
  </organization>

  <developers>
    <developer>
      <name>Mekom Solutions</name>
      <url>https://www.mekomsolutions.com</url>
    </developer>
  </developers>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

    <ozone.artifactId>ozone</ozone.artifactId>
    <ozone.groupId>com.ozonehis</ozone.groupId>
    <ozone.version>1.0.0-SNAPSHOT</ozone.version>
    <ozone-scripts.version>1.0.0-SNAPSHOT</ozone-scripts.version>
  </properties>

  <dependencies>
    <dependency>
      <groupId>${ozone.groupId}</groupId>
      <artifactId>${ozone.artifactId}</artifactId>
      <type>zip</type>
      <version>${ozone.version}</version>
    </dependency>
    <dependency>
      <groupId>com.ozonehis</groupId>
      <artifactId>ozone-scripts</artifactId>
      <type>zip</type>
      <version>${ozone-scripts.version}</version>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <!-- Unpack Ozone zip -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>Unpack Ozone</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>unpack-dependencies</goal>
            </goals>
            <configuration>
              <excludeTransitive>true</excludeTransitive>
              <outputDirectory>${project.build.directory}/${ozone.artifactId}</outputDirectory>
              <includeArtifactIds>${ozone.artifactId}</includeArtifactIds>
            </configuration>
          </execution>

          <execution>
            <id>Copy OpenMRS modules to a temporary location</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
            <configuration>
              <excludeTransitive>true</excludeTransitive>
              <useBaseVersion>true</useBaseVersion>
              <outputDirectory>${project.build.directory}/openmrs_modules/</outputDirectory>
              <!-- copying jars and omods only -->
              <includeTypes>jar, omod</includeTypes>
            </configuration>
          </execution>

          <execution>
            <id>Unpack Ozone Scripts</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>unpack-dependencies</goal>
            </goals>
            <configuration>
              <excludeTransitive>true</excludeTransitive>
              <outputDirectory>${project.build.directory}/scripts</outputDirectory>
              <includeArtifactIds>ozone-scripts</includeArtifactIds>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>3.1.0</version>
        <executions>
          <execution>
            <!-- Prefix content packages so that the overwrite order can be determined -->
            <id>prefix content packages</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <executable>bash</executable>
              <arguments>
                <argument>${project.build.directory}/scripts/openmrs/prefix-content-packages.sh</argument>
                <argument>${project.build.directory}/${project.artifactId}-${project.version}/distro/configs/openmrs/initializer_config</argument>
                <!-- File which contains list of content packages in order in which the configs should be applied -->
                <argument>${project.build.directory}/scripts/openmrs/content-packages.txt</argument>
              </arguments>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <executions>
          <execution>
            <!-- Exclude files from Ozone -->
            <!-- We exclude nothing here, but distros should override this with any exclusions they
            need -->
            <id>Exclude unneeded Ozone files</id>
            <phase>process-resources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>
                ${project.build.directory}/${project.artifactId}-${project.version}</outputDirectory>
              <overwrite>true</overwrite>
              <resources>
                <resource>
                  <directory>${project.build.directory}/${ozone.artifactId}</directory>
                </resource>
              </resources>
            </configuration>
          </execution>

          <execution>
            <!-- Copy reference-application-spa-assemble-config.json to frontend working directory -->
            <id>Copy reference-application-spa-assemble-config.json to local working directory</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/openmrs_frontend</outputDirectory>
              <overwrite>true</overwrite>
              <resources>
                <resource>
                  <directory>
                    ${project.build.directory}/${ozone.artifactId}/distro/configs/openmrs/frontend_assembly</directory>
                  <filtering>false</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>

          <execution>
            <!-- Copy local spa-assemble-config.json if any -->
            <id>Copy spa-assemble-config.json</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>
                ${project.build.directory}/openmrs_frontend
              </outputDirectory>
              <overwrite>true</overwrite>
              <resources>
                <resource>
                  <directory>${project.basedir}/configs/openmrs/frontend_assembly</directory>
                  <includes>
                    <include>spa-assemble-config.json</include>
                  </includes>
                  <filtering>false</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>

          <execution>
            <!-- Copy and substitute some helper files (for demo and Gitpod) -->
            <id>Copy and substitute some helper files</id>
            <phase>process-resources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/</outputDirectory>
              <overwrite>true</overwrite>
              <resources>
                <resource>
                  <directory>${project.basedir}/.mvn</directory>
                  <filtering>false</filtering>
                </resource>
                <resource>
                  <directory>${project.basedir}</directory>
                  <includes>
                    <include>mvnw</include>
                    <include>mvnw.cmd</include>
                  </includes>
                  <filtering>false</filtering>
                </resource>
                <resource>
                  <directory>${project.basedir}/scripts</directory>
                  <filtering>false</filtering>
                </resource>
                <resource>
                  <directory>${project.basedir}/scripts</directory>
                  <includes>
                    <include>*.sh</include>
                  </includes>
                  <excludes>
                    <exclude>start-ozone.sh</exclude>
                  </excludes>
                  <filtering>true</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/scripts</directory>
                  <filtering>false</filtering>
                </resource>
                <resource>
                  <directory>${project.build.directory}/scripts</directory>
                  <includes>
                    <include>*.sh</include>
                  </includes>
                  <excludes>
                    <exclude>start-ozone.sh</exclude>
                  </excludes>
                  <filtering>true</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>

          <execution>
            <!-- Copy the docker-compose-files.txt file to set the services to run -->
            <id>Copy docker-compose-files.txt</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>
                ${project.build.directory}/${project.artifactId}-${project.version}/run/docker/scripts</outputDirectory>
              <overwrite>true</overwrite>
              <resources>
                <resource>
                  <directory>${project.basedir}/scripts</directory>
                  <includes>
                    <include>docker-compose-files.txt</include>
                    <include>start-ozone.sh</include>
                    <include>*.env</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>

          <execution>
            <!-- Override with local config files-->
            <id>Copy local resources</id>
            <phase>process-resources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>
                ${project.build.directory}/${project.artifactId}-${project.version}/distro/configs</outputDirectory>
              <overwrite>true</overwrite>
              <resources>
                <resource>
                  <directory>${project.basedir}/configs</directory>
                  <excludes>
                    <exclude>.gitkeep</exclude>
                    <exclude>/openmrs/initializer_config/**</exclude>
                  </excludes>
                </resource>
              </resources>
            </configuration>
          </execution>

          <execution>
            <!-- Copy OpenMRS modules -->
            <id>Copy OpenMRS modules</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>
                ${project.build.directory}/${project.artifactId}-${project.version}/distro/binaries/openmrs/modules</outputDirectory>
              <overwrite>true</overwrite>
              <resources>
                <resource>
                  <directory>${project.build.directory}/openmrs_modules</directory>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Merge Ozone .env and distro.env files -->
      <plugin>
        <groupId>com.bekioui.maven.plugin</groupId>
        <artifactId>merge-maven-plugin</artifactId>
        <version>1.2.0</version>
        <executions>
          <execution>
            <id>Merge env files</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>merge</goal>
            </goals>
            <configuration>
              <merges>
                <merge>
                  <target>
                    ${project.build.directory}/${project.artifactId}-${project.version}/run/docker/concatenated.env</target>
                  <searchDir>${project.build.directory}/${project.artifactId}-${project.version}/run/docker</searchDir>
                  <pattern>^(?!ozone-dir\.env$|concatenated\.env$).*\.env</pattern>
                  <override>true</override>
                </merge>
              </merges>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <executions>
          <execution>
            <id>Rename JAR to OMOD</id>
            <phase>process-resources</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <target>
                <taskdef resource="net/sf/antcontrib/antcontrib.properties"
                  classpathref="maven.plugin.classpath" />
                <mkdir dir="${project.build.directory}/openmrs_modules" />
                <if>
                  <resourcecount when="greater" count="0">
                    <fileset dir="${project.build.directory}/openmrs_modules"
                      includes="*-omod-*.jar" />
                  </resourcecount>
                  <then>
                    <move todir="${project.build.directory}/openmrs_modules">
                      <fileset dir="${project.build.directory}/openmrs_modules" />
                      <mapper from="^(.+)-omod-(.+)\.jar" to="\1-\2.omod" type="regexp" />
                    </move>
                    <delete>
                      <fileset dir="${project.build.directory}/openmrs_modules" excludes="**/*.omod" />
                    </delete>
                  </then>
                </if>
              </target>
            </configuration>
          </execution>

          <execution>
            <id>copy-openmrs-config-and-modify-initializer-config</id>
            <phase>process-resources</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <target>
                <mkdir dir="${project.build.directory}/${project.artifactId}-${project.version}/distro/configs/openmrs/initializer_config"/>
                <copy todir="${project.build.directory}/${project.artifactId}-${project.version}/distro/configs/openmrs/initializer_config"
                      failonerror="false"
                      quiet="true">
                  <fileset dir="${project.basedir}/configs/openmrs/initializer_config"
                           erroronmissingdir="false"/>
                  <mapper type="regexp"
                          from="^([^/]+)/(.+)$"
                          to="\1/${project.artifactId}/\2"/>
                </copy>
              </target>
            </configuration>
          </execution>

            <!-- Temporary workaround because of AH not loading in Ref App 3.4.0 -->
            <!-- Flatten addresshierarchy folder structure -->
            <execution>
                <id>flatten-addresshierarchy</id>
                <phase>package</phase>
                <configuration>
                    <target>
                        <!-- Copy all files from subfolders into the parent folder -->
                        <copy todir="${project.build.directory}/${project.artifactId}-${project.version}/distro/configs/openmrs/initializer_config/addresshierarchy" overwrite="true">
                            <fileset dir="${project.build.directory}/${project.artifactId}-${project.version}/distro/configs/openmrs/initializer_config/addresshierarchy">
                                <!-- Include all subfolder files -->
                                <include name="*/**"/>
                            </fileset>
                            <!-- flattenmapper removes the subfolder structure -->
                            <flattenmapper/>
                        </copy>
                    </target>
                </configuration>
                <goals>
                    <goal>run</goal>
                </goals>
            </execution>

          <execution>
            <id>Update Ozone Info</id>
            <phase>process-resources</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <target>
                <taskdef name="groovy" classname="org.codehaus.groovy.ant.Groovy" classpathref="maven.plugin.classpath"/>
                <groovy>
                  def ozoneInfoFile = new File("${project.build.directory}/${project.artifactId}-${project.version}/distro/ozone-info.json")
                  def ozoneInfo = new groovy.json.JsonSlurper().parse(ozoneInfoFile)
                  ozoneInfo.name = "${project.artifactId}"
                  ozoneInfo.version = "${project.version}"
                  ozoneInfo.description = "${project.description}"
                  ozoneInfoFile.text = groovy.json.JsonOutput.prettyPrint(groovy.json.JsonOutput.toJson(ozoneInfo))
                </groovy>
              </target>
            </configuration>
          </execution>
        </executions>
        <dependencies>
          <dependency>
            <groupId>ant-contrib</groupId>
            <artifactId>ant-contrib</artifactId>
            <version>1.0b3</version>
            <exclusions>
              <exclusion>
                <groupId>ant</groupId>
                <artifactId>ant</artifactId>
              </exclusion>
            </exclusions>
          </dependency>
          <dependency>
            <groupId>org.apache.groovy</groupId>
            <artifactId>groovy-ant</artifactId>
            <version>${maven.groovy.version}</version>
          </dependency>
          <dependency>
            <groupId>org.apache.groovy</groupId>
            <artifactId>groovy-json</artifactId>
            <version>${maven.groovy.version}</version>
          </dependency>
        </dependencies>
      </plugin>

      <plugin>
        <groupId>org.codehaus.gmavenplus</groupId>
        <artifactId>gmavenplus-plugin</artifactId>
        <executions>
          <execution>
            <id>Rebuild OpenMRS Frontend if necessary</id>
            <goals>
              <goal>execute</goal>
            </goals>
            <phase>process-resources</phase>
            <configuration>
              <scripts>
                <script>
                  file://${project.build.directory}/openmrs/frontend_assembly/build-openmrs-frontend.groovy</script>
              </scripts>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- packaging the distro as a installable/deployable file -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-assembly-plugin</artifactId>
        <executions>
          <execution>
            <id>Package Ozone Artifact</id>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
            <configuration>
              <appendAssemblyId>false</appendAssemblyId>
              <descriptors>
                <descriptor>assembly.xml</descriptor>
              </descriptors>
            </configuration>
          </execution>
        </executions>
      </plugin>

    </plugins>
  </build>
  <profiles>
    <profile>
      <id>bundled-docker</id>
      <properties>
        <!-- Groovy template version-->
        <groovyTemplatesVersion>3.0.22</groovyTemplatesVersion>
        <!-- Ozone Bundled version-->
        <ozoneBundledDocker>1.0.0-SNAPSHOT</ozoneBundledDocker>
        <!-- Fabric8 Docker Maven Plugin version-->
        <dockerMavenPlugin>0.45.0</dockerMavenPlugin>
        <!-- Docker push registry-->
        <docker.push.registry>docker.io</docker.push.registry>
        <!-- Docker push registry username-->
        <docker.push.registry.username>mekomsolutions</docker.push.registry.username>
        <!-- Docker Compose bundled override filename -->
        <bundled.docker.compose.override.filename>docker-compose-bundled.yml.template</bundled.docker.compose.override.filename>
        <!-- Docker Compose bundled output filename -->
        <bundled.docker.compose.output.filename>docker-compose-bundled.yml</bundled.docker.compose.output.filename>
        <!-- Enable SSO in Docker Compose bundled -->
        <bundled.docker.compose.sso.enabled>false</bundled.docker.compose.sso.enabled>
        <!-- Ozone Bundled Docker build directory -->
        <ozone.bundled.docker.build.directory>${project.build.directory}/bundled-docker-tmp</ozone.bundled.docker.build.directory>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-dependency-plugin</artifactId>
            <executions>
              <execution>
                <id>Unpack Ozone Bundled Docker to a temporary location</id>
                <phase>generate-resources</phase>
                <goals>
                  <goal>unpack-dependencies</goal>
                </goals>
                <configuration>
                  <excludeTransitive>true</excludeTransitive>
                  <filtering>true</filtering>
                  <outputDirectory>${ozone.bundled.docker.build.directory}/bundled-docker</outputDirectory>
                  <includeArtifactIds>bundled-docker</includeArtifactIds>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.codehaus.gmavenplus</groupId>
            <artifactId>gmavenplus-plugin</artifactId>
            <executions>
              <execution>
                <id>Generate Docker Compose Bundled yaml</id>
                <goals>
                  <goal>execute</goal>
                </goals>
                <phase>process-resources</phase>
                <configuration>
                  <scripts>
                    <script>
                      file://${project.build.directory}/scripts/openmrs/bundled-docker/generate-bundled-docker-compose.groovy</script>
                  </scripts>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-resources-plugin</artifactId>
            <executions>
              <execution>
                <!-- Copy Docker Bundled compose file to run directory -->
                <id>Copy Docker compose file</id>
                <phase>package</phase>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <outputDirectory>
                    ${project.build.directory}/${project.artifactId}-${project.version}/run/docker</outputDirectory>
                  <overwrite>true</overwrite>
                  <resources>
                    <resource>
                      <directory>
                        ${ozone.bundled.docker.build.directory}/bundled-docker</directory>
                      <filtering>true</filtering>
                      <includes>
                        <include>${bundled.docker.compose.output.filename}</include>
                        <include>docker-compose-bundled-sso.yml</include>
                      </includes>
                      <excludes>
                        <exclude>**/*.template</exclude>
                      </excludes>
                    </resource>
                  </resources>
                </configuration>
              </execution>
              <execution>
                <!-- Copy Distro to tmp folder-->
                <id>Copy Distro</id>
                <phase>package</phase>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <outputDirectory>
                    ${ozone.bundled.docker.build.directory}/distro</outputDirectory>
                  <overwrite>true</overwrite>
                  <resources>
                    <resource>
                      <directory>
                        ${project.build.directory}/${project.artifactId}-${project.version}/distro</directory>
                      <filtering>false</filtering>
                    </resource>
                  </resources>
                </configuration>
              </execution>
              <execution>
                <!-- Copy start-bundled.sh, start-bundled-sso.sh to scripts folder-->
                <id>Copy bundled-docker helper scripts</id>
                <phase>package</phase>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <outputDirectory>
                    ${project.build.directory}/${project.artifactId}-${project.version}/run/docker/scripts
                  </outputDirectory>
                  <overwrite>true</overwrite>
                  <resources>
                    <resource>
                      <directory>${ozone.bundled.docker.build.directory}/bundled-docker/scripts</directory>
                      <filtering>true</filtering>
                      <includes>
                        <include>start-bundled.sh</include>
                        <include>start-bundled-sso.sh</include>
                      </includes>
                    </resource>
                  </resources>
                </configuration>
              </execution>
              <execution>
                 <id>copy Docker Compose bundled overrides</id>
                 <phase>generate-resources</phase>
                 <goals>
                     <goal>copy-resources</goal>
                 </goals>
                  <configuration>
                     <outputDirectory>
                        ${ozone.bundled.docker.build.directory}/bundled-docker
                     </outputDirectory>
                      <resources>
                         <resource>
                            <directory>${project.basedir}/bundled-docker</directory>
                            <filtering>false</filtering>
                         </resource>
                      </resources>
                      <overwrite>true</overwrite>
                 </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <version>${dockerMavenPlugin}</version>
            <configuration>
              <pushRegistry>${docker.push.registry}</pushRegistry>
              <images>
                <image>
                  <name>${docker.push.registry.username}/%a-openmrs-backend</name>
                  <build>
                    <dockerFile>
                      ${ozone.bundled.docker.build.directory}/bundled-docker/openmrs/Dockerfile</dockerFile>
                    <contextDir>
                      ${ozone.bundled.docker.build.directory}/</contextDir>
                  </build>
                </image>
                <image>
                  <name>${docker.push.registry.username}/%a-openmrs-frontend</name>
                  <build>
                    <dockerFile>
                      ${ozone.bundled.docker.build.directory}/bundled-docker/frontend/Dockerfile</dockerFile>
                    <contextDir>
                      ${ozone.bundled.docker.build.directory}/</contextDir>
                  </build>
                </image>
                <image>
                  <name>${docker.push.registry.username}/%a-proxy</name>
                  <build>
                    <dockerFile>
                      ${ozone.bundled.docker.build.directory}/bundled-docker/proxy/Dockerfile</dockerFile>
                    <contextDir>
                      ${ozone.bundled.docker.build.directory}/</contextDir>
                  </build>
                </image>
                <image>
                  <name>${docker.push.registry.username}/%a-odoo</name>
                  <build>
                    <dockerFile>
                      ${ozone.bundled.docker.build.directory}/bundled-docker/odoo/Dockerfile</dockerFile>
                    <contextDir>
                      ${ozone.bundled.docker.build.directory}/distro</contextDir>
                  </build>
                </image>
                <image>
                  <name>${docker.push.registry.username}/%a-senaite</name>
                  <build>
                    <dockerFile>
                      ${ozone.bundled.docker.build.directory}/bundled-docker/senaite/Dockerfile</dockerFile>
                    <contextDir>
                      ${ozone.bundled.docker.build.directory}/distro</contextDir>
                  </build>
                </image>
                <image>
                  <name>${docker.push.registry.username}/%a-senaite-sso</name>
                  <build>
                    <dockerFile>
                      ${ozone.bundled.docker.build.directory}/bundled-docker/senaite/Dockerfile-sso</dockerFile>
                    <contextDir>
                      ${ozone.bundled.docker.build.directory}/distro</contextDir>
                  </build>
                </image>
                <image>
                  <name>${docker.push.registry.username}/%a-eip-odoo-openmrs</name>
                  <build>
                    <dockerFile>
                      ${ozone.bundled.docker.build.directory}/bundled-docker/eip-odoo-openmrs/Dockerfile</dockerFile>
                    <contextDir>
                      ${ozone.bundled.docker.build.directory}/distro</contextDir>
                  </build>
                </image>
                <image>
                  <name>${docker.push.registry.username}/%a-eip-openmrs-senaite</name>
                  <build>
                    <dockerFile>
                      ${ozone.bundled.docker.build.directory}/bundled-docker/eip-openmrs-senaite/Dockerfile</dockerFile>
                    <contextDir>
                      ${ozone.bundled.docker.build.directory}/distro</contextDir>
                  </build>
                </image>
                <image>
                  <name>${docker.push.registry.username}/%a-postgresql</name>
                  <build>
                    <dockerFile>
                      ${ozone.bundled.docker.build.directory}/bundled-docker/postgresql/Dockerfile</dockerFile>
                    <contextDir>
                      ${ozone.bundled.docker.build.directory}/distro</contextDir>
                  </build>
                </image>
                <image>
                  <name>${docker.push.registry.username}/%a-mysql</name>
                  <build>
                    <dockerFile>
                      ${ozone.bundled.docker.build.directory}/bundled-docker/mysql/Dockerfile</dockerFile>
                    <contextDir>
                      ${ozone.bundled.docker.build.directory}/distro</contextDir>
                  </build>
                </image>
                <image>
                  <name>${docker.push.registry.username}/%a-keycloak</name>
                  <build>
                    <dockerFile>
                      ${ozone.bundled.docker.build.directory}/bundled-docker/keycloak/Dockerfile</dockerFile>
                    <contextDir>
                      ${ozone.bundled.docker.build.directory}/distro</contextDir>
                  </build>
                </image>
                <image>
                  <name>${docker.push.registry.username}/%a-grafana-agent</name>
                  <build>
                    <dockerFile>
                      ${ozone.bundled.docker.build.directory}/bundled-docker/grafana-agent/Dockerfile</dockerFile>
                    <contextDir>
                      ${project.build.directory}/${project.artifactId}-${project.version}/run/docker</contextDir>
                  </build>
                </image>
              </images>
              <tags>
                <tag>%l</tag>
              </tags>
              <buildx>
                <platforms>
                  <platform>linux/amd64</platform>
                  <platform>linux/arm64</platform>
                </platforms>
              </buildx>
            </configuration>
            <executions>
              <execution>
                <id>Build Bundled Docker images</id>
                <goals>
                  <goal>build</goal>
                </goals>
                <phase>package</phase>
              </execution>
              <execution>
                <id>Push Bundled Docker images</id>
                <goals>
                  <goal>push</goal>
                </goals>
                <phase>deploy</phase>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
      <dependencies>
        <dependency>
          <groupId>com.ozonehis</groupId>
          <artifactId>bundled-docker</artifactId>
          <type>zip</type>
          <version>${ozoneBundledDocker}</version>
        </dependency>
        <dependency>
          <groupId>org.codehaus.groovy</groupId>
          <artifactId>groovy-templates</artifactId>
          <version>${groovyTemplatesVersion}</version>
        </dependency>
      </dependencies>
    </profile>
  </profiles>
</project>
